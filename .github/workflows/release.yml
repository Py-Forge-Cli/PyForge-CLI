name: Release to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.6)'
        required: true
        type: string

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      is-patch: ${{ steps.check-version.outputs.is-patch }}
      is-feature: ${{ steps.check-version.outputs.is-feature }}
      version: ${{ steps.check-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check version type
        id: check-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if it's a patch release (x.y.z where z > 0)
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[1-9][0-9]*$ ]]; then
            echo "is-patch=true" >> $GITHUB_OUTPUT
            echo "is-feature=false" >> $GITHUB_OUTPUT
            echo "This is a patch release: $VERSION"
          else
            echo "is-patch=false" >> $GITHUB_OUTPUT
            echo "is-feature=true" >> $GITHUB_OUTPUT
            echo "This is a feature release: $VERSION"
          fi

  test:
    runs-on: ubuntu-latest
    needs: validate-tag
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test,all]"
          
      - name: Run tests
        run: |
          pytest tests/ \
            --cov=pyforge_cli \
            --cov-report=term-missing \
            --cov-report=xml \
            -v

  security:
    runs-on: ubuntu-latest
    needs: validate-tag
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run security checks
        run: |
          bandit -r src/ -f json -o bandit-report.json
          safety check --json --output safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          
      - name: Build package
        run: |
          python -m build
          
      - name: Show version
        run: |
          python -c "import setuptools_scm; print(f'Version: {setuptools_scm.get_version()}')"
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-tag, build]
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          generateReleaseNotes: true
          makeLatest: true
          name: "PyForge CLI ${{ needs.validate-tag.outputs.version }}"
          tag: ${{ github.ref_name }}
          body: |
            ## Release Type
            ${{ needs.validate-tag.outputs.is-patch == 'true' && 'This is a **patch release** with bug fixes.' || 'This is a **feature release** with new functionality.' }}
            
            ## Installation
            ```bash
            pip install --upgrade pyforge-cli
            ```
            
            ## What's Changed
            See the full changelog below for detailed changes.
            
            ## Branch Information
            - **Patch releases** are created from the `main` branch
            - **Feature releases** are created from the `develop` branch
            
            ---
            
            **Full Changelog**: https://github.com/Py-Forge-CLI/PyForge-CLI/compare/v${{ needs.validate-tag.outputs.version }}...HEAD