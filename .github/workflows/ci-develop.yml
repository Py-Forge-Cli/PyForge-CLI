name: CI Develop Branch (Features)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          
      - name: Run linting
        run: |
          ruff check src/ tests/
          
      - name: Run formatting check
        run: |
          black --check src/ tests/
          
      - name: Run type checking
        run: |
          mypy src/

  test:
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test,all]"
          
      - name: Run comprehensive test suite
        run: |
          # Full test suite including integration and slow tests
          pytest tests/ \
            --run-pyspark \
            --cov=pyforge_cli \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --html=pytest_html_report.html \
            --self-contained-html \
            -v
            
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        
      - name: Upload test results
        if: always() && matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            pytest_html_report.html
            htmlcov/

  pyspark-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test,all]"
          
      - name: Run PySpark tests
        run: |
          pytest tests/test_pyspark_csv_converter.py \
            --run-pyspark \
            -v \
            --cov=pyforge_cli.converters.pyspark_csv_converter \
            --cov-report=term-missing

  security:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run security checks
        run: |
          bandit -r src/ -f json -o bandit-report.json
          safety check --json --output safety-report.json

  publish-testpypi:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [test, pyspark-tests, security]
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          
      - name: Build package
        run: |
          python -m build
          
      - name: Show version
        run: |
          python -c "import setuptools_scm; print(f'Version: {setuptools_scm.get_version()}')"
          
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true